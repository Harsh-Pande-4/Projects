#include <iostream>
using namespace std;

bool is_valid(int board[9][9], int row, int col, int num) {
    // Check if the number already exists in the row
    for (int i = 0; i < 9; i++) {
        if (board[row][i] == num) {
            return false;
        }
    }

    // Check if the number already exists in the column
    for (int i = 0; i < 9; i++) {
        if (board[i][col] == num) {
            return false;
        }
    }

    // Check if the number already exists in the 3x3 grid
    int start_row = (row / 3) * 3;
    int start_col = (col / 3) * 3;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[start_row + i][start_col + j] == num) {
                return false;
            }
        }
    }

    return true;
}

bool solve_sudoku(int board[9][9]) {
    for (int row = 0; row < 9; row++) {
        for (int col = 0; col < 9; col++) {
            // Find an empty cell
            if (board[row][col] == 0) {
                for (int num = 1; num <= 9; num++) {
                    // Check if the number is valid in the current cell
                    if (is_valid(board, row, col, num)) {
                        // Place the number in the cell
                        board[row][col] = num;

                        // Recursively solve the updated board
                        if (solve_sudoku(board)) {
                            return true;
                        }

                        // If the current number doesn't lead to a solution, undo the placement
                        board[row][col] = 0;
                    }
                }

                // If no number can be placed in the current cell, the puzzle is unsolvable
                return false;
            }
        }
    }

    // If all cells are filled, the puzzle is solved
    return true;
}

void print_sudoku(int board[9][9]) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int sudoku_board[9][9];

    cout << "Enter the Sudoku board (use 0 for empty cells):\n";
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cin >> sudoku_board[i][j];
        }
    }

    cout << "Sudoku Board:\n";
    print_sudoku(sudoku_board);

    if (solve_sudoku(sudoku_board)) {
        cout << "\nSolution:\n";
        print_sudoku(sudoku_board);
    } else {
        cout << "\nCannot solve the Sudoku board.\n";
    }

    return 0;
}
